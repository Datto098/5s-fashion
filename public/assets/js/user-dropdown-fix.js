/**
 * User Dropdown Fix
 * Script ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ dropdown menu kh√¥ng ho·∫°t ƒë·ªông
 * Ch·ªâ √°p d·ª•ng cho c√°c dropdown t√πy ch·ªânh, kh√¥ng √°p d·ª•ng cho bootstrap dropdowns
 */

document.addEventListener('DOMContentLoaded', function () {
	// T√¨m t·∫•t c·∫£ dropdown toggles trong header (ngo·∫°i tr·ª´ .user-dropdown v√¨ n√≥ d√πng Bootstrap)
	const userDropdowns = document.querySelectorAll(
		'.top-bar .dropdown-toggle:not([data-bs-toggle]), .header-actions .dropdown-toggle:not([data-bs-toggle])'
	);

	console.log('üìã Custom dropdowns to initialize:', userDropdowns.length);

	userDropdowns.forEach(function (toggle) {
		// X√≥a t·∫•t c·∫£ c√°c s·ª± ki·ªán hi·ªán c√≥
		const newToggle = toggle.cloneNode(true);
		toggle.parentNode.replaceChild(newToggle, toggle);

		// Th√™m x·ª≠ l√Ω click m·ªõi
		newToggle.addEventListener('click', function (event) {
			console.log('üîÑ Custom dropdown clicked:', this.textContent);
			event.preventDefault();
			event.stopPropagation();

			// T√¨m dropdown container v√† menu
			const dropdown = this.closest('.dropdown');
			const menu = dropdown.querySelector('.dropdown-menu');

			// ƒê√≥ng t·∫•t c·∫£ c√°c menu kh√°c
			document
				.querySelectorAll('.dropdown-menu.show')
				.forEach(function (openMenu) {
					if (openMenu !== menu) {
						openMenu.classList.remove('show');
						openMenu.closest('.dropdown').classList.remove('show');
					}
				});

			// Toggle menu hi·ªán t·∫°i
			dropdown.classList.toggle('show');
			menu.classList.toggle('show');

			// ƒê·ªãnh v·ªã menu ƒë√∫ng c√°ch
			if (menu.classList.contains('show')) {
				console.log('üîç Showing dropdown menu:', menu);
				const rect = this.getBoundingClientRect();

				// Reset v·ªã tr√≠
				menu.style.position = 'absolute';
				menu.style.inset = 'auto';
				menu.style.transform = 'none';

				// ƒê·∫∑t v·ªã tr√≠ menu d∆∞·ªõi toggle
				menu.style.top = rect.height + 'px';
				menu.style.left = '0';

				// ƒê·∫£m b·∫£o menu hi·ªÉn th·ªã ƒë√∫ng
				menu.style.display = 'block';
				menu.style.visibility = 'visible';
				menu.style.opacity = '1';
				menu.style.pointerEvents = 'auto';
				menu.style.zIndex = '1050';

				// Ki·ªÉm tra n·∫øu menu s·∫Ω ra ngo√†i m√†n h√¨nh b√™n ph·∫£i
				const menuRect = menu.getBoundingClientRect();
				if (menuRect.right > window.innerWidth) {
					menu.style.left = 'auto';
					menu.style.right = '0';
				}

				// ƒê·∫£m b·∫£o c√°c li√™n k·∫øt trong dropdown c√≥ th·ªÉ click ƒë∆∞·ª£c
				menu.querySelectorAll('a, .dropdown-item').forEach(function (
					link
				) {
					link.style.pointerEvents = 'auto';
					link.style.cursor = 'pointer';
					link.style.position = 'relative';
					link.style.zIndex = '1060';
				});
			}
		});
	});

	// ƒê√≥ng dropdown khi nh·∫•p ra ngo√†i
	document.addEventListener('click', function (event) {
		if (!event.target.closest('.dropdown')) {
			document
				.querySelectorAll('.dropdown-menu.show')
				.forEach(function (menu) {
					menu.classList.remove('show');
					if (menu.closest('.dropdown')) {
						menu.closest('.dropdown').classList.remove('show');
					}
				});
		}
	});

	// ƒê·∫£m b·∫£o c√°c li√™n k·∫øt trong dropdown ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
	document
		.querySelectorAll('.dropdown-menu a, .dropdown-item')
		.forEach(function (link) {
			link.addEventListener('click', function (event) {
				// Ghi log th·ª≠ nghi·ªám
				console.log(
					'üëÜ Link clicked:',
					this.textContent,
					this.href || ''
				);

				// Cho ph√©p chuy·ªÉn h∆∞·ªõng b√¨nh th∆∞·ªùng
				event.stopPropagation();
			});
		});

	console.log('‚úÖ User dropdown fix applied');
});
